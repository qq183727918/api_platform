Index: My_api/views_api.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n_*_ coding: UTF-8 _*_\r\n@Time      : 2021/3/23 16:47\r\n@Author    : LiuXiaoQiang\r\n@Site      : https://github.com/qq183727918\r\n@File      : views_api.py\r\n@Software  : PyCharm\r\n\"\"\"\r\nimport datetime\r\nimport json\r\nimport re\r\nimport time\r\n\r\nimport requests\r\nfrom django.http import HttpResponse, HttpResponseRedirect\r\nfrom django.shortcuts import render\r\n# Create your views here.\r\nfrom icecream import ic\r\n\r\nfrom My_api.models import *\r\nfrom My_api.static.params.return_params import RE\r\n# 返回子页面\r\nfrom My_api.static.public_method.public_method import new_token, decode_token\r\n\r\n\r\ndef child(request, eid, oid, ooid):\r\n    ic('child', eid, oid, ooid)\r\n    res = child_json(eid, oid, ooid)\r\n    return render(request, eid, res)\r\n\r\n\r\n# 控制不同页面返回不同的数据：数据分发器\r\ndef child_json(eid, oid='', ooid=''):\r\n    ic(eid, oid, ooid)\r\n    res = {}\r\n    if eid == 'home.html':\r\n        date = DbHomeHref.objects.all()\r\n        home_log = DbApisLog.objects.filter(user_id=oid)[::-1]\r\n        hosts = DbHost.objects.all()\r\n        user_projects = DbProject.objects.filter(user=DbUser.objects.filter(id=oid)[0].username, is_delete=0)\r\n\r\n        # 个人数据看板\r\n        count_project = len(user_projects)\r\n        count_api = sum([len(DbApis.objects.filter(project_id=i.id)) for i in user_projects])\r\n        count_case = sum([len(DbCases.objects.filter(project_id=i.id)) for i in user_projects])\r\n\r\n        ziyuan_all = len(DbProject.objects.filter(is_delete=0).all()) + len(DbApis.objects.all()) + len(\r\n            DbCases.objects.all())\r\n        ziyuan_user = count_project + count_api + count_case\r\n        if ziyuan_all == 0:\r\n            ziyuan = ziyuan_user * 100\r\n        else:\r\n            ziyuan = int(ziyuan_user / ziyuan_all * 100)\r\n\r\n        new_res = {\r\n            \"count_project\": count_project,\r\n            \"count_api\": count_api,\r\n            \"count_case\": count_case,\r\n            \"count_report\": '',\r\n            \"ziyuan\": ziyuan,\r\n        }\r\n        if ooid == '':\r\n            res = {\"hrefs\": date, \"home_log\": home_log, \"hosts\": hosts, \"user_projects\": user_projects}\r\n        else:\r\n            log = DbApisLog.objects.filter(id=ooid)[0]\r\n            res = {\"hrefs\": date, \"home_log\": home_log, \"log\": log, hosts: \"hosts\", \"user_projects\": user_projects}\r\n        res.update(new_res)\r\n\r\n    if eid == 'project_list.html':\r\n        date = DbProject.objects.filter(is_delete=0)\r\n        res = {\"projects\": date}\r\n        ic(date)\r\n\r\n    if eid == 'P_apis.html':\r\n        project = DbProject.objects.filter(id=oid)[0]\r\n        apis = DbApis.objects.filter(project_id=oid, is_delete=0)\r\n\r\n        for i in apis:\r\n            try:\r\n                i.short_url = i.api_url.split('?')[0][:50]\r\n            except:\r\n                i.short_url = ''\r\n        project_header = DbProjectHeader.objects.filter(project_id=oid)\r\n        hosts = DbHost.objects.all()\r\n        project_host = DbProjectHost.objects.filter(project_id=oid)\r\n        res = {\"project\": project, 'apis': apis, 'project_header': project_header, 'hosts': hosts,\r\n               'project_host': project_host}\r\n        ic(res)\r\n\r\n    if eid == 'P_project_set.html':\r\n        project = DbProject.objects.filter(id=oid)[0]\r\n        res = {\"project\": project}\r\n        ic(project)\r\n\r\n    if eid == 'P_cases.html':\r\n        # 这里应该是去数据库拿到这个项目的所有用例\r\n        project = DbProject.objects.filter(id=oid)[0]\r\n        Cases = DbCases.objects.filter(project_id=oid)\r\n        apis = DbApis.objects.filter(project_id=oid)\r\n        project_header = DbProjectHeader.objects.filter(project_id=oid)\r\n        hosts = DbHost.objects.all()\r\n        project_host = DbProjectHost.objects.filter(project_id=oid)\r\n        res = {\"project\": project, \"Cases\": Cases, \"apis\": apis, 'project_header': project_header, 'hosts': hosts,\r\n               'project_host': project_host}\r\n\r\n    if eid == 'P_global_data.html':\r\n        project = DbProject.objects.filter(id=oid)[0]\r\n        global_data_s = DbGlobalData.objects.filter(user_id=project.user_id)\r\n        res = {\"project\": project, \"global_data\": global_data_s}\r\n        ic(res)\r\n\r\n    if eid == 'user.html':\r\n        add = []\r\n        users = DbUser.objects.filter(is_delete=0).values()\r\n        for i in users:\r\n            i['is_active'] = '启用'\r\n            add.append(i)\r\n        ic(add)\r\n        res = {\"users\": users}\r\n        ic(users)\r\n\r\n    return res\r\n\r\n\r\n# 获取公共字典\r\ndef glodict(request):\r\n    user_data = DbUser.objects.filter(id=1).values()[0]\r\n    userimg = str(user_data['id']) + '.png'  # 这里我们写死png后缀，因为上传时候我们也可以强行弄成这个png后缀\r\n    res = {\"username\": user_data['username'], \"userimg\": userimg}\r\n    return res\r\n\r\n\r\n# 上传用户头像\r\ndef user_upload(request):\r\n    file = request.FILES.get(\"fileUpload\", None)  # 靠name获取上传的文件，如果没有，避免报错，设置成None\r\n\r\n    if not file:\r\n        return HttpResponseRedirect('/home/')  # 如果没有则返回到首页\r\n\r\n    new_name = str(request.user.id) + '.png'  # 设置好这个新图片的名字\r\n    ic(new_name)\r\n    destination = open(r\"D:\\platform\\My_api\\static\\img\\\\\" + new_name, 'wb')  # 打开特定的文件进行二进制的写操作\r\n    for chunk in file.chunks():  # 分块写入文件\r\n        destination.write(chunk)\r\n    destination.close()\r\n\r\n    return HttpResponseRedirect('/home/')  # 返回到首页\r\n\r\n\r\n# 登录\r\ndef login_action(request):\r\n    if request.method == \"POST\":\r\n        data = json.loads(request.body)\r\n        ic(data)\r\n        Authorization = request.headers['Authorization']\r\n        Authorization_ = 'Basic YzU5Mzg3ZmMzMQ=='\r\n        if Authorization == Authorization_:\r\n            u_name = data['params']['username']\r\n            p_word = data['params']['password']\r\n            ic(u_name, p_word, data)\r\n            if u_name == '':\r\n                dic = json.dumps({\"code\": 30001, \"data\": \"false\", \"message\": \"请输入账号\"})\r\n                return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n            if p_word == '':\r\n                dic = json.dumps({\"code\": 30002, \"data\": \"false\", \"message\": \"请输入密码\"})\r\n                return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n            # 开始联通用户库，查看用户密码是否正确\r\n            username = DbUser.objects.filter(username=u_name).values()\r\n\r\n            if username.count() == 0:\r\n                dic = json.dumps({\"code\": 30003, \"data\": \"false\", \"message\": \"用户名不存在请检查\"})\r\n                return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n            else:\r\n                for name in username:\r\n                    if u_name == name['username']:\r\n                        if p_word == name['password']:\r\n                            token = new_token(name['username'])\r\n                            ic(token)\r\n                            dic = json.dumps({\"code\": 200, \"data\": {\"access_token\": token}, \"message\": \"OK\"})\r\n                            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n                        else:\r\n                            dic = json.dumps({\"code\": 30004, \"data\": \"false\", \"message\": \"密码错误，请重试！\"})\r\n                            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n        else:\r\n            res = HttpResponse(json.dumps({\"code\": 401, \"data\": False, \"message\": \"凭证错误！\"}))\r\n            res.status_code = 401\r\n            return res\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 注册\r\ndef sign_action(request):\r\n    if request.method == \"POST\":\r\n        data = json.loads(request.body)\r\n        u_name = data[\"username\"]\r\n        p_word = data[\"password\"]\r\n        ic(u_name, p_word)\r\n        if u_name in ['', None]:\r\n            dic = json.dumps({\"code\": 30001, \"data\": \"false\", \"message\": \"请输入账号\"})\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n        if p_word in ['', None]:\r\n            dic = json.dumps({\"code\": 30002, \"data\": \"false\", \"message\": \"请输入密码\"})\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n        username = DbUser.objects.filter(username=u_name).values().count()\r\n        ic(username)\r\n        if username == 0:\r\n            # 开始关联django用户表\r\n            DbUser.objects.create(username=u_name, password=p_word, is_delete=0, is_active=0)\r\n            dic = json.dumps({\"code\": 200, \"data\": \"false\", \"message\": \"注册成功！\"})\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n        else:\r\n            dic = json.dumps({\"code\": 30005, \"data\": \"false\", \"message\": \"注册失败~用户名好像已经存在了~\"})\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 退出\r\ndef logout(request):\r\n    from django.contrib import auth\r\n\r\n    auth.logout(request)\r\n\r\n    return HttpResponseRedirect('/login/')\r\n\r\n\r\n# 吐槽\r\ndef pei(request):\r\n    Roast_input = request.GET['Roast_input']\r\n    ic(Roast_input)\r\n\r\n    DB_Roast.objects.create(user=request.user.username, text=Roast_input)\r\n\r\n    return HttpResponse(Roast_input)\r\n\r\n\r\n# 删除项目\r\ndef delete_project(request):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        Id = data['id']\r\n        ic(Id)\r\n        DbProject.objects.filter(id=Id).update(is_delete=1)\r\n        DbApis.objects.filter(project_id=Id).update(is_delete=1)  # 删除旗下接口\r\n\r\n        all_Case = DbCases.objects.filter(project_id=Id)\r\n        ic(all_Case)\r\n        if all_Case.count() == 0:\r\n            pass\r\n        else:\r\n            for i in all_Case:\r\n                DbStep.objects.filter(Case_id=i.id).update(is_delete=1)  # 删除步骤\r\n                i.update(is_delete=1)  # 用例删除自己\r\n        from My_api.static.public_method.mysql_id_order_by import mysql_id_order_by\r\n        mysql_id_order_by('db_project')\r\n        return HttpResponse(json.dumps({\"code\": 200, \"data\": True, \"message\": \"ok\"}))\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 新增项目\r\ndef add_project(request):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        list_po = data['list_po']\r\n        project_name = data['project_name']\r\n        project_remark = data['project_remark']\r\n        ic(list_po, project_name, project_remark)\r\n        username = DbUser.objects.filter(username=list_po, is_delete=0, is_active=0).values().count()\r\n        if username == 0:\r\n            return HttpResponse('输入管理员不存在或未启用，请重新输入！')\r\n        else:\r\n            others = DbUser.objects.filter(username=list_po, is_delete=0, is_active=0).values()[0]\r\n            ic(others)\r\n            DbProject.objects.create(name=project_name,\r\n                                     remark=project_remark,\r\n                                     user=others['username'],\r\n                                     user_id=others['id'],\r\n                                     other=list_po,\r\n                                     is_delete=0)\r\n            return HttpResponse('成功')\r\n\r\n\r\n# 保存项目设置\r\ndef save_project_set(request, id):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        project_id = id\r\n        ic(project_id)\r\n        name = data['name']\r\n        remark = data['remark']\r\n        other_user = data['other_user']\r\n        ic(project_id, name, remark, other_user)\r\n        username = DbUser.objects.filter(username=other_user, is_delete=0, is_active=0).values().count()\r\n        if username == 0:\r\n            dic = json.dumps({'code': 31002, 'data': True, 'message': '输入管理员不存在或未启用，请重新输入!'})\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n        else:\r\n            others = DbUser.objects.filter(username=other_user, is_delete=0, is_active=0).values()[0]\r\n            ic(others)\r\n            DbProject.objects.filter(id=project_id).update(name=name, remark=remark, other=other_user)\r\n            dic = json.dumps({'code': 200, 'data': True, 'message': 'ok'})\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 新增接口\r\ndef project_api_add(request, Pid):\r\n    project_id = Pid\r\n    ic(project_id)\r\n    DbApis.objects.create(project_id=project_id,\r\n                          name='',\r\n                          api_models='',\r\n                          api_url='',\r\n                          api_header='',\r\n                          is_delete=0)\r\n    return HttpResponseRedirect('/apis/%s/' % project_id)\r\n\r\n\r\n# 删除接口\r\ndef project_api_del(request, id):\r\n    project_id = DbApis.objects.filter(id=id)[0].project_id\r\n    DbApis.objects.filter(id=id).update(is_delete=1)\r\n    return HttpResponseRedirect('/apis/%s/' % project_id)\r\n\r\n\r\n# 备注保存接口\r\ndef save_bz(request):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        api_id = data['api_id']\r\n        bz_value = data['bz_value']\r\n        ic(bz_value)\r\n        DbApis.objects.filter(id=api_id).update(des=bz_value)\r\n        dic = json.dumps({'code': 200, 'data': True, 'message': '成功'})\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 备注获取接口\r\ndef get_bz(request):\r\n    if request.method == 'GET':\r\n        api_id = request.GET['api_id']\r\n        bz_value = DbApis.objects.filter(id=api_id)[0].des\r\n        ic(bz_value)\r\n        dic = json.dumps({\"code\": 200, \"data\": \"true\", \"message\": {\"bz_value\": f\"{bz_value}\"}})\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 保存接口\r\ndef Api_save(request):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        api_id = data['api_id']\r\n        ts_method = data['ts_method']\r\n        ts_url = data['ts_url']\r\n        ts_host = data['ts_host']\r\n        ts_login = data['ts_login']\r\n        ts_header = data['ts_header']\r\n        ts_body_method = data['ts_body_method']\r\n        api_name = data['api_name']\r\n        ts_project_headers = data['ts_project_headers']\r\n        ic(api_id, ts_method, ts_url, ts_host, ts_header, ts_body_method, api_name)\r\n\r\n        if ts_body_method == '返回体':\r\n            api = DbApis.objects.filter(id=api_id).values()[0]\r\n            ic(api)\r\n            ts_body_method = api['last_body_method']\r\n            ts_api_body = api['last_api_body']\r\n            ic(ts_body_method, ts_body_method)\r\n        else:\r\n            ts_api_body = data['ts_api_body']\r\n            ic(ts_api_body)\r\n        print(ts_project_headers)\r\n        # 保存数据\r\n        DbApis.objects.filter(id=api_id).update(\r\n            api_models=ts_method,\r\n            api_url=ts_url,\r\n            api_login=ts_login,\r\n            api_host=ts_host,\r\n            api_header=ts_header,\r\n            body_method=ts_body_method,\r\n            api_body=ts_api_body,\r\n            name=api_name,\r\n            public_header=ts_project_headers\r\n        )\r\n\r\n        dic = json.dumps({\"code\": 200, \"data\": \"true\", \"message\": \"success\"})\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 查询接口内容\r\ndef get_api_data(request):\r\n    if request.method == 'GET':\r\n        api_id = request.GET['api_id']\r\n        api = DbApis.objects.filter(id=api_id).values()[0]\r\n        return HttpResponse(json.dumps(api), content_type='application/json')\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 调试层发送请求\r\ndef Api_send(request):\r\n    if request.method == 'POST':\r\n        datas = json.loads(request.body)\r\n        ic(datas)\r\n        # 提取所有数据\r\n        api_id = datas['api_id']\r\n        ts_method = datas['ts_method']\r\n        ts_url = datas['ts_url']\r\n        ts_host = datas['ts_host']\r\n        ts_header = datas['ts_header']\r\n        api_name = datas['api_name']\r\n        ts_body_method = datas['ts_body_method']\r\n        ts_project_headers = datas['ts_project_headers'].split(',')\r\n        ts_login = datas['ts_login']\r\n        if ts_login == 'yes':  # 说明要调用登陆态了\r\n            login_res = project_login_send_for_other(project_id=DbApis.objects.filter(id=api_id)[0].project_id)\r\n        else:\r\n            login_res = {}\r\n        # 处理域名host\r\n        if ts_host[:4] == '全局域名':\r\n            project_host_id = ts_host.split('-')[1]\r\n            ts_host = DbProjectHost.objects.filter(id=project_host_id)[0].host\r\n        if ts_body_method == '返回体':\r\n            api = DbApis.objects.filter(id=api_id)[0]\r\n            ts_body_method = api.last_body_method\r\n            ts_api_body = api.last_api_body\r\n            if ts_body_method in ['', None]:\r\n                return HttpResponse('请先选择好请求体编码格式和请求体，再点击Send按钮发送请求！')\r\n        else:\r\n            ts_api_body = datas['ts_api_body']\r\n            api = DbApis.objects.filter(id=api_id)\r\n            api.update(last_body_method=ts_body_method, last_api_body=ts_api_body)\r\n        # 发送请求获取返回值\r\n        if ts_header == '':\r\n            ts_header = '{}'\r\n        try:\r\n            header = json.loads(ts_header)  # 处理header\r\n        except:\r\n            return HttpResponse('请求头不符合json格式！')\r\n\r\n        for i in ts_project_headers:\r\n            if i != '':\r\n                project_header = DbProjectHeader.objects.filter(id=i)[0]\r\n                header[project_header.key] = project_header.value\r\n        # 拼接完整url\r\n        if ts_host[-1] == '/' and ts_url[0] == '/':  # 都有/\r\n            url = ts_host[:-1] + ts_url\r\n        elif ts_host[-1] != '/' and ts_url[0] != '/':  # 都没有/\r\n            url = ts_host + '/' + ts_url\r\n        else:  # 肯定有一个有/\r\n            url = ts_host + ts_url\r\n        # 插入登陆态字段\r\n        ## url插入\r\n        if '?' not in url:\r\n            url += '?'\r\n            if type(login_res) == dict:\r\n                for i in login_res.keys():\r\n                    url += i + '=' + login_res[i] + '&'\r\n        else:  # 证明已经有参数了\r\n            if type(login_res) == dict:\r\n                for i in login_res.keys():\r\n                    url += '&' + i + '=' + login_res[i]\r\n\r\n        ## header插入\r\n        if type(login_res) == dict:\r\n            header.update(login_res)\r\n\r\n        try:\r\n            if ts_body_method == 'none':\r\n                if type(login_res) == dict:\r\n                    response = requests.request(ts_method.upper(), url, headers=header, data={})\r\n                else:\r\n                    response = login_res.request(ts_method.upper(), url, headers=header, data={})\r\n\r\n            elif ts_body_method == 'form-data':\r\n                files = []\r\n                payload = {}\r\n                for i in eval(ts_api_body):\r\n                    payload[i[0]] = i[1]\r\n                if type(login_res) == dict:\r\n                    for i in login_res.keys():\r\n                        payload[i] = login_res[i]\r\n                    response = requests.request(ts_method.upper(), url, headers=header, data=payload, files=files)\r\n                else:\r\n                    response = login_res.request(ts_method.upper(), url, headers=header, data=payload, files=files)\r\n\r\n            elif ts_body_method == 'x-www-form-urlencoded':\r\n                header['Content-Type'] = 'application/x-www-form-urlencoded'\r\n                payload = {}\r\n                for i in eval(ts_api_body):\r\n                    payload[i[0]] = i[1]\r\n                if type(login_res) == dict:\r\n                    for i in login_res.keys():\r\n                        payload[i] = login_res[i]\r\n                        ic(url, i)\r\n                    response = requests.request(ts_method.upper(), url, headers=header, data=payload)\r\n                else:\r\n                    response = login_res.request(ts_method.upper(), url, headers=header, data=payload)\r\n\r\n            elif ts_body_method == 'GraphQL':\r\n                header['Content-Type'] = 'application/json'\r\n                query = ts_api_body.split('*WQRF*')[0]\r\n                graphql = ts_api_body.split('*WQRF*')[1]\r\n                try:\r\n                    eval(graphql)\r\n                except:\r\n                    graphql = '{}'\r\n                payload = '{\"query\":\"%s\",\"variables\":%s}' % (query, graphql)\r\n                if type(login_res) == dict:\r\n                    response = requests.request(ts_method.upper(), url, headers=header, data=payload)\r\n                else:\r\n                    response = login_res.request(ts_method.upper(), url, headers=header, data=payload)\r\n\r\n            else:  # 这时肯定是raw的五个子选项：\r\n                if ts_body_method == 'Text':\r\n                    header['Content-Type'] = 'text/plain'\r\n\r\n                if ts_body_method == 'JavaScript':\r\n                    header['Content-Type'] = 'text/plain'\r\n\r\n                if ts_body_method == 'Json':\r\n                    ts_api_body = json.loads(ts_api_body)\r\n                    for i in login_res.keys():\r\n                        ts_api_body[i] = login_res[i]\r\n                    ts_api_body = json.dumps(ts_api_body)\r\n                    header['Content-Type'] = 'text/plain'\r\n\r\n                if ts_body_method == 'Html':\r\n                    header['Content-Type'] = 'text/plain'\r\n\r\n                if ts_body_method == 'Xml':\r\n                    header['Content-Type'] = 'text/plain'\r\n                if type(login_res) == dict:\r\n                    response = requests.request(ts_method.upper(), url, headers=header,\r\n                                                data=ts_api_body.encode('utf-8'))\r\n                else:\r\n                    response = login_res.request(ts_method.upper(), url, headers=header,\r\n                                                 data=ts_api_body.encode('utf-8'))\r\n            # 把返回值传递给前端页面\r\n            response.encoding = \"utf-8\"\r\n\r\n            DbHost.objects.update_or_create(host=ts_host, is_delete=0)\r\n            ic(response.json())\r\n            dic = json.dumps({\"code\": 200, \"data\": True, \"massage\": f\"{response.text}\"})\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n        except Exception as e:\r\n            dic = json.dumps({'code': 10010, 'data': False, 'massage': f'{e}'})\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 复制接口\r\ndef copy_api(request):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        api_id = data['api_id']\r\n        # 开始复制接口\r\n        old_api = DbApis.objects.filter(id=api_id)[0]\r\n        ic(old_api)\r\n        ic(DbApis.objects.filter(id=api_id).values()[0])\r\n\r\n        DbApis.objects.create(project_id=old_api.project_id,\r\n                              name=old_api.name + '_副本',\r\n                              api_models=old_api.api_models,\r\n                              api_url=old_api.api_url,\r\n                              api_header=old_api.api_header,\r\n                              api_login=old_api.api_login,\r\n                              api_host=old_api.api_host,\r\n                              des=old_api.des,\r\n                              body_method=old_api.body_method,\r\n                              api_body=old_api.api_body,\r\n                              result=old_api.result,\r\n                              sign=old_api.sign,\r\n                              file_key=old_api.file_key,\r\n                              file_name=old_api.file_name,\r\n                              public_header=old_api.public_header,\r\n                              last_body_method=old_api.last_body_method,\r\n                              last_api_body=old_api.last_api_body,\r\n                              is_delete=0\r\n                              )\r\n        # 返回\r\n        dic = json.dumps({'code': 200, 'data': True, 'message': 'ok'})\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 异常值发送请求\r\ndef error_request(request):\r\n    # ic(request)\r\n    api_id = request.GET['api_id']\r\n    # ic(api_id)\r\n    new_body = request.GET['new_body']\r\n    ic(new_body)\r\n    span_text = request.GET['span_text']\r\n    # 验证下请求体是不是新的替换过\r\n    # ic(api_id)\r\n\r\n    api = DbApis.objects.filter(id=api_id)[0]\r\n    method = api.api_models\r\n    url = api.api_url\r\n    host = api.api_host\r\n    header = api.api_header\r\n    body_method = api.body_method\r\n\r\n    if header == '':\r\n        header = '{}'\r\n\r\n    # 处理域名host\r\n    if host[:4] == '全局域名':\r\n        project_host_id = host.split('-')[1]\r\n        ic(DbProjectHost.objects.filter(id=project_host_id)[0])\r\n        host = DbProjectHost.objects.filter(id=project_host_id)[0].host\r\n\r\n    try:\r\n        # 发送请求获取返回值\r\n        header = json.loads(header)  # 处理header\r\n    except Exception as e:\r\n        return HttpResponse(f'请求头不符合json格式！原因：{e}')\r\n\r\n    if host[-1] == '/' and url[0] == '/':  # 都有/\r\n        url = host[:-1] + url\r\n    elif host[-1] != '/' and url[0] != '/':  # 都没有/\r\n        url = host + '/' + url\r\n    else:  # 肯定有一个有/\r\n        url = host + url\r\n    ic(host)\r\n    try:\r\n        if body_method == 'form-data':\r\n            files = []\r\n            payload = {}\r\n            for i in eval(new_body):\r\n                payload[i[0]] = i[1]\r\n            response = requests.request(method.upper(), url, headers=header, data=payload, files=files)\r\n\r\n        elif body_method == 'x-www-form-urlencoded':\r\n            ic('x-www-form-urlencoded')\r\n            ic('url', url)\r\n            header['Content-Type'] = 'application/x-www-form-urlencoded'\r\n            payload = {}\r\n            for i in eval(new_body):\r\n                payload[i[0]] = i[1]\r\n            response = requests.request(method.upper(), url, headers=header, data=payload)\r\n        elif body_method == 'Json':\r\n            header['Content-Type'] = 'text/plain'\r\n            response = requests.request(method.upper(), url, headers=header, data=new_body.encode('utf-8'))\r\n        else:\r\n            return HttpResponse('非法的请求体类型')\r\n        # 把返回值传递给前端页面\r\n        response.encoding = \"utf-8\"\r\n        res_json = {\"response\": response.text, \"span_text\": span_text}\r\n        ic(f'正常{res_json}')\r\n        return HttpResponse(json.dumps(res_json), content_type='application/json')\r\n    except Exception as e:\r\n        res_json = {\"response\": \"对不起，接口未通！\", \"span_text\": span_text, \"原因是\": e}\r\n        return HttpResponse(json.dumps(res_json), content_type='application/json')\r\n\r\n\r\n# 首页发送请求\r\ndef Api_send_home(request):\r\n    ic(request)\r\n    # 提取所有数据\r\n    ts_method = request.GET['ts_method']\r\n    ic(ts_method)\r\n    ts_url = request.GET['ts_url']\r\n    ts_host = request.GET['ts_host']\r\n    ts_header = request.GET['ts_header']\r\n    ts_body_method = request.GET['ts_body_method']\r\n    ts_api_body = request.GET['ts_api_body']\r\n    ic(ts_api_body)\r\n    # 发送请求获取返回值\r\n\r\n    if ts_header == '':\r\n        ts_header = '{}'\r\n    try:\r\n        header = json.loads(ts_header)  # 处理header\r\n    except Exception as e:\r\n        return HttpResponse(f'请求头不符合json格式！,原因为：{e}')\r\n    # 写入到数据库请求记录中\r\n    DbApisLog.objects.create(\r\n        user_id=1,\r\n        api_method=ts_method,\r\n        api_url=ts_url,\r\n        api_header=ts_header,\r\n        api_host=ts_host,\r\n        body_method=ts_body_method,\r\n        api_body=ts_api_body,\r\n        is_delete=0\r\n    )\r\n\r\n    # 拼接完整url\r\n    if ts_host[-1] == '/' and ts_url[0] == '/':  # 都有/\r\n        url = ts_host[:-1] + ts_url\r\n    elif ts_host[-1] != '/' and ts_url[0] != '/':  # 都没有/\r\n        url = ts_host + '/' + ts_url\r\n    else:  # 肯定有一个有/\r\n        url = ts_host + ts_url\r\n    try:\r\n        if ts_body_method == 'none':\r\n            response = requests.request(ts_method.upper(), url, headers=header, data={})\r\n\r\n        elif ts_body_method == 'form-data':\r\n            files = []\r\n            payload = {}\r\n            for i in eval(ts_api_body):\r\n                payload[i[0]] = i[1]\r\n            response = requests.request(ts_method.upper(), url, headers=header, data=payload, files=files)\r\n\r\n        elif ts_body_method == 'x-www-form-urlencoded':\r\n            header['Content-Type'] = 'application/x-www-form-urlencoded'\r\n            payload = {}\r\n            for i in eval(ts_api_body):\r\n                payload[i[0]] = i[1]\r\n            response = requests.request(ts_method.upper(), url, headers=header, data=payload)\r\n\r\n        elif ts_body_method == 'GraphQL':\r\n            header['Content-Type'] = 'application/x-www-form-urlencoded'\r\n            query = ts_api_body.split('*WQRF*')[0]\r\n            graphql = ts_api_body.split('*WQRF*')[1]\r\n            try:\r\n                eval(graphql)\r\n            except:\r\n                graphql = {}\r\n            payload = f'{\"query\": {query}, \"variables\": {graphql}}'\r\n            response = requests.request(ts_method.upper(), url, headers=header, data=payload)\r\n\r\n        else:  # 这时肯定是raw的五个子选项：\r\n            if ts_body_method == 'Text':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if ts_body_method == 'JavaScript':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if ts_body_method == 'Json':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if ts_body_method == 'Html':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if ts_body_method == 'Xml':\r\n                header['Content-Type'] = 'text/plain'\r\n            response = requests.request(ts_method.upper(), url, headers=header, data=ts_api_body.encode('utf-8'))\r\n\r\n        # 把返回值传递给前端页面\r\n        response.encoding = \"utf-8\"\r\n        DbHost.objects.update_or_create(host=ts_host, is_delete=0)\r\n        return HttpResponse(json.dumps({\"code\": 200, \"data\": response.text, \"message\": \"OK\"}))\r\n    except Exception as e:\r\n        return HttpResponse(str(e))\r\n\r\n\r\n# 首页获取请求记录\r\ndef get_home_log(request):\r\n    user_id = request.user.id\r\n    all_logs = DbApisLog.objects.filter(user_id=1).values()\r\n    ret = {\"all_log\": list(all_logs.values(\"id\", \"api_method\", 'api_host', \"api_url\"))[::-1]}\r\n    return HttpResponse(json.dumps(ret), content_type='application/json')\r\n\r\n\r\n# 获取完整的单一的请求记录数据\r\ndef get_api_log_home(request):\r\n    log_id = request.GET['log_id']\r\n    log = DbApisLog.objects.filter(id=log_id)\r\n    ret = {\"log\": list(log.values())[0]}\r\n    ic(ret)\r\n    return HttpResponse(json.dumps(ret), content_type='application/json')\r\n\r\n\r\n# 增加用例\r\ndef add_case(request, eid):\r\n    DbCases.objects.create(project_id=eid, name='', is_delete=0)\r\n    return HttpResponseRedirect('/cases/%s/' % eid)\r\n\r\n\r\n# 删除用例\r\ndef del_case(request, eid, oid):\r\n    DbCases.objects.filter(id=oid).delete()\r\n    return HttpResponseRedirect('/cases/%s/' % eid)\r\n\r\n\r\n# 复制用例\r\ndef copy_case(request, eid, oid):\r\n    old_case = DbCases.objects.filter(id=oid)[0]\r\n    DbCases.objects.create(project_id=old_case.project_id, name=old_case.name + '_副本')\r\n    return HttpResponseRedirect('/cases/%s/' % eid)\r\n\r\n\r\n# 获取小用例步骤的数据\r\ndef get_small(request):\r\n    case_id = request.GET['case_id']\r\n    ic(case_id)\r\n    steps = DbStep.objects.filter(Case_id=case_id).order_by('index')\r\n    ret = {\"all_steps\": list(steps.values(\"index\", \"id\", \"name\"))}\r\n    return HttpResponse(json.dumps(ret), content_type='application/json')\r\n\r\n\r\n# 新增小步骤\r\ndef add_new_step(request):\r\n    Case_id = request.GET['Case_id']\r\n    ic('add', Case_id)\r\n    a = DbStep.objects.filter(Case_id=Case_id)\r\n    ic(a)\r\n    all_len = len(DbStep.objects.filter(Case_id=Case_id))\r\n    DbStep.objects.create(Case_id=Case_id, name='我是新步骤', index=all_len + 1, is_delete=0)\r\n    return HttpResponse('')\r\n\r\n\r\n# 删除小步骤\r\ndef delete_step(request, eid):\r\n    ic(eid)\r\n    step = DbStep.objects.filter(id=eid)[0]  # 获取待删除的step\r\n    ic(step)\r\n    index = step.index  # 获取目标index\r\n    Case_id = step.Case_id  # 获取目标所属大用例id\r\n    step.delete()  # 删除目标step\r\n    # 遍历所有该大用例下的步骤中 顺序号大于目标index的步骤\r\n    for i in DbStep.objects.filter(Case_id=Case_id).filter(index=index):\r\n        i.index -= 1  # 执行顺序自减1\r\n        i.save()\r\n\r\n    return HttpResponse('')\r\n\r\n\r\n# 获取小步骤数据\r\ndef get_step(request):\r\n    step_id = request.GET['step_id']\r\n    step = DbStep.objects.filter(id=step_id)\r\n    steplist = list(step.values())[0]\r\n\r\n    return HttpResponse(json.dumps(steplist), content_type=\"application/json\")\r\n\r\n\r\n# 保存小步骤\r\ndef save_step(request):\r\n    step_id = request.GET['step_id']\r\n    name = request.GET['name']\r\n    index = request.GET['index']\r\n    step_method = request.GET['step_method']\r\n    step_url = request.GET['step_url']\r\n    step_host = request.GET['step_host']\r\n    step_header = request.GET['step_header']\r\n    ts_project_headers = request.GET['ts_project_headers']\r\n    ic(ts_project_headers)\r\n    mock_res = request.GET['mock_res']\r\n    step_body_method = request.GET['step_body_method']\r\n    step_api_body = request.GET['step_api_body']\r\n    get_path = request.GET['get_path']\r\n    get_zz = request.GET['get_zz']\r\n    assert_zz = request.GET['assert_zz']\r\n    assert_qz = request.GET['assert_qz']\r\n    assert_path = request.GET['assert_path']\r\n    step_login = request.GET['step_login']\r\n\r\n    DbStep.objects.filter(id=step_id).update(name=name,\r\n                                             index=index,\r\n                                             api_method=step_method,\r\n                                             api_url=step_url,\r\n                                             api_host=step_host,\r\n                                             api_header=step_header,\r\n                                             public_header=ts_project_headers,\r\n                                             mock_res=mock_res,\r\n                                             api_body_method=step_body_method,\r\n                                             api_body=step_api_body,\r\n                                             get_path=get_path,\r\n                                             get_zz=get_zz,\r\n                                             assert_zz=assert_zz,\r\n                                             assert_qz=assert_qz,\r\n                                             assert_path=assert_path,\r\n                                             api_login=step_login,\r\n                                             )\r\n    return HttpResponse('')\r\n\r\n\r\n# 步骤详情页获取接口数据\r\ndef step_get_api(request):\r\n    api_id = request.GET['api_id']\r\n    api = DbApis.objects.filter(id=api_id).values()[0]\r\n    return HttpResponse(json.dumps(api), content_type=\"application/json\")\r\n\r\n\r\n# 运行大用例\r\ndef Run_Case(request):\r\n    Case_id = request.GET['Case_id']\r\n    Case = DbCases.objects.filter(id=Case_id)[0]\r\n    steps = DbStep.objects.filter(Case_id=Case_id)\r\n    ic(steps)\r\n    from My_api.run_case import run\r\n    run(Case.id, Case.name, steps)\r\n\r\n    return HttpResponse('')\r\n\r\n\r\n# 查看报告\r\ndef look_report(request, eid):\r\n    Case_id = eid\r\n\r\n    return render(request, 'Reports/%s.html' % Case_id)\r\n\r\n\r\n# 保存项目公共请求头\r\ndef save_project_header(request):\r\n    project_id = request.GET['project_id']\r\n    req_names = request.GET['req_names']\r\n    req_keys = request.GET['req_keys']\r\n    req_values = request.GET['req_values']\r\n    req_ids = request.GET['req_ids']\r\n\r\n    ic(project_id, req_names, req_keys, req_values, req_ids)\r\n\r\n    names = req_names.split(',')\r\n    keys = req_keys.split(',')\r\n    values = req_values.split(',')\r\n    ids = req_ids.split(',')\r\n    ic(names, keys, values, ids)\r\n    for i in range(len(ids)):\r\n        if names[i] != '':\r\n            if ids[i] == 'new':\r\n                DbProjectHeader.objects.create(project_id=project_id, name=names[i], key=keys[i], value=values[i],\r\n                                               is_delete=0)\r\n            else:\r\n                DbProjectHeader.objects.filter(id=ids[i]).update(name=names[i], key=keys[i], value=values[i],\r\n                                                                 is_delete=0)\r\n        else:\r\n            try:\r\n                DbProjectHeader.objects.filter(id=ids[i]).delete()\r\n            except:\r\n                pass\r\n    return HttpResponse(json.dumps({\"code\": 200, \"data\": True, \"message\": \"OK\"}))\r\n\r\n\r\n# 保存用例名称\r\ndef save_case_name(request):\r\n    Id = request.GET['id']\r\n    name = request.GET['name']\r\n    ic(Id, name)\r\n    DbCases.objects.filter(id=Id).update(name=name)\r\n    return HttpResponse('')\r\n\r\n\r\n# 保存项目公共域名\r\ndef save_project_host(request):\r\n    project_id = request.GET['project_id']\r\n    req_names = request.GET['req_names']\r\n    req_hosts = request.GET['req_hosts']\r\n    req_ids = request.GET['req_ids']\r\n    names = req_names.split(',')\r\n    hosts = req_hosts.split(',')\r\n    ids = req_ids.split(',')\r\n    for i in range(len(ids)):\r\n        if names[i] != '':\r\n            if ids[i] == 'new':\r\n                DbProjectHost.objects.create(project_id=project_id, name=names[i], host=hosts[i], is_delete=0)\r\n            else:\r\n                DbProjectHost.objects.filter(id=ids[i]).update(name=names[i], host=hosts[i])\r\n        else:\r\n            try:\r\n                DbProjectHost.objects.filter(id=ids[i]).delete()\r\n            except:\r\n                pass\r\n    return HttpResponse('')\r\n\r\n\r\n# 获取项目登录态\r\ndef project_get_login(request):\r\n    if request.method == 'GET':\r\n        project_id = request.GET['project_id']\r\n        ic(project_id)\r\n        try:\r\n            login = DbLogin.objects.filter(project_id=project_id).values()[0]\r\n        except:\r\n            login = {}\r\n        return HttpResponse(json.dumps(login), content_type='application/json')\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 保存登陆态接口\r\ndef project_login_save(request):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        # 提取所有数据\r\n        project_id = data['project_id']\r\n        login_method = data['login_method']\r\n        login_url = data['login_url']\r\n        login_host = data['login_host']\r\n        login_header = data['login_header']\r\n        login_body_method = data['login_body_method']\r\n        login_api_body = data['login_api_body']\r\n        login_response_set = data['login_response_set']\r\n        # 保存数据\r\n        ic(project_id,\r\n           login_method,\r\n           login_url,\r\n           login_host,\r\n           login_header,\r\n           login_body_method,\r\n           login_api_body,\r\n           login_response_set)\r\n        if DbLogin.objects.filter(project_id=project_id).values().count() == 0:\r\n            DbLogin.objects.create(\r\n                project_id=project_id,\r\n                api_method=login_method,\r\n                api_url=login_url,\r\n                api_header=login_header,\r\n                api_host=login_host,\r\n                body_method=login_body_method,\r\n                api_body=login_api_body,\r\n                set=login_response_set,\r\n                is_delete=0\r\n            )\r\n        else:\r\n            DbLogin.objects.filter(project_id=project_id).update(\r\n                api_method=login_method,\r\n                api_url=login_url,\r\n                api_header=login_header,\r\n                api_host=login_host,\r\n                body_method=login_body_method,\r\n                api_body=login_api_body,\r\n                set=login_response_set,\r\n                is_delete=0\r\n            )\r\n        # 返回\r\n        dic = json.dumps({'code': 200, 'data': True, 'massage': 'success'})\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 调试登陆态接口\r\ndef project_login_send(request):\r\n    # 第一步，获取前端数据\r\n    login_method = request.GET['login_method']\r\n    login_url = request.GET['login_url']\r\n    login_host = request.GET['login_host']\r\n    login_header = request.GET['login_header']\r\n    login_body_method = request.GET['login_body_method']\r\n    login_api_body = request.GET['login_api_body']\r\n    login_response_set = request.GET['login_response_set']\r\n\r\n    if login_header == '':\r\n        login_header = '{}'\r\n\r\n    ic(login_method,\r\n       login_url,\r\n       login_host,\r\n       login_header,\r\n       login_body_method,\r\n       login_api_body,\r\n       login_response_set)\r\n    # 第二步，发送请求\r\n    try:\r\n        header = json.loads(login_header)  # 处理header\r\n    except:\r\n        return HttpResponse('请求头不符合json格式！')\r\n\r\n        # 处理域名host\r\n    if login_host[:4] == '全局域名':\r\n        project_host_id = login_host.split('-')[1]\r\n        ic(DbProjectHost.objects.filter(id=project_host_id)[0])\r\n        login_host = DbProjectHost.objects.filter(id=project_host_id)[0].host\r\n\r\n    # 拼接完整url\r\n    if login_host[-1] == '/' and login_url[0] == '/':  # 都有/\r\n        url = login_host[:-1] + login_url\r\n        ic(url)\r\n    elif login_host[-1] != '/' and login_url[0] != '/':  # 都没有/\r\n        url = login_host + '/' + login_url\r\n        ic(url)\r\n    else:  # 肯定有一个有/\r\n        url = login_host + login_url\r\n        ic(url)\r\n    try:\r\n        if login_body_method == 'none':\r\n            response = requests.request(login_method.upper(), url, headers=header, data={})\r\n        elif login_body_method == 'form-data':\r\n            files = []\r\n            payload = {}\r\n            for i in eval(login_api_body):\r\n                payload[i[0]] = i[1]\r\n            response = requests.request(login_method.upper(), url, headers=header, data=payload, files=files)\r\n\r\n        elif login_body_method == 'x-www-form-urlencoded':\r\n            header['Content-Type'] = 'application/x-www-form-urlencoded'\r\n            payload = {}\r\n            for i in eval(login_api_body):\r\n                payload[i[0]] = i[1]\r\n            response = requests.request(login_method.upper(), url, headers=header, data=payload)\r\n\r\n        elif login_body_method == 'GraphQL':\r\n            header['Content-Type'] = 'application/json'\r\n            query = login_api_body.split('*WQRF*')[0]\r\n            graphql = login_api_body.split('*WQRF*')[1]\r\n            try:\r\n                eval(graphql)\r\n            except:\r\n                graphql = '{}'\r\n            payload = '{\"query\":\"%s\",\"variables\":%s}' % (query, graphql)\r\n            response = requests.request(login_method.upper(), url, headers=header, data=payload)\r\n\r\n\r\n        else:  # 这时肯定是raw的五个子选项：\r\n            if login_body_method == 'Text':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if login_body_method == 'JavaScript':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if login_body_method == 'Json':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if login_body_method == 'Html':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if login_body_method == 'Xml':\r\n                header['Content-Type'] = 'text/plain'\r\n            response = requests.request(login_method.upper(), url, headers=header, data=login_api_body.encode('utf-8'))\r\n\r\n        # 把返回值传递给前端页面\r\n        response.encoding = \"utf-8\"\r\n        DbHost.objects.update_or_create(host=login_host)\r\n        res = response.json()\r\n\r\n        # 第三步，对返回值进行提取\r\n        get_res = ''  # 声明提取结果存放\r\n        for i in login_response_set.split('\\n'):\r\n            if i == \"\":\r\n                continue\r\n            else:\r\n                i = i.replace(' ', '')\r\n                key = i.split('=')[0]  # 拿出key\r\n                path = i.split('=')[1]  # 拿出路径\r\n                value = res\r\n                for j in path.split('/')[1:]:\r\n                    value = value[j]\r\n                get_res += key + '=\"' + value + '\"\\n'\r\n        # 第四步，返回前端\r\n        end_res = {\"response\": response.text, \"get_res\": get_res}\r\n        return HttpResponse(json.dumps(end_res), content_type='application/json')\r\n\r\n    except Exception as e:\r\n        end_res = {\"response\": str(e), \"get_res\": ''}\r\n        return HttpResponse(json.dumps(end_res), content_type='application/json')\r\n\r\n\r\n# 调用登陆态接口\r\ndef project_login_send_for_other(project_id):\r\n    # 第一步，获取数据\r\n    login_api = DbLogin.objects.filter(project_id=project_id)[0]\r\n    login_method = login_api.api_method\r\n    login_url = login_api.api_url\r\n    login_host = login_api.api_host\r\n    login_header = login_api.api_header\r\n    login_body_method = login_api.body_method\r\n    login_api_body = login_api.api_body\r\n    login_response_set = login_api.set\r\n\r\n    if login_header == '':\r\n        login_header = '{}'\r\n    # 第二步，发送请求\r\n    try:\r\n        header = json.loads(login_header)  # 处理header\r\n    except:\r\n        return HttpResponse('请求头不符合json格式！')\r\n\r\n    # 拼接完整url\r\n    if login_host[-1] == '/' and login_url[0] == '/':  # 都有/\r\n        url = login_host[:-1] + login_url\r\n    elif login_host[-1] != '/' and login_url[0] != '/':  # 都没有/\r\n        url = login_host + '/' + login_url\r\n    else:  # 肯定有一个有/\r\n        url = login_host + login_url\r\n    try:\r\n        if login_body_method == 'none':\r\n            # 先判断是否是cookie持久化，若是，则不处理\r\n            if login_response_set == 'cookie':\r\n                a = requests.session()\r\n                a.request(login_method.upper(), url, headers=header, data={})\r\n                return a\r\n            else:\r\n                response = requests.request(login_method.upper(), url, headers=header, data={})\r\n        elif login_body_method == 'form-data':\r\n            files = []\r\n            payload = {}\r\n            for i in eval(login_api_body):\r\n                payload[i[0]] = i[1]\r\n            # 先判断是否是cookie持久化，若是，则不处理\r\n            if login_response_set == 'cookie':\r\n                a = requests.session()\r\n                a.request(login_method.upper(), url, headers=header, data={})\r\n                return a\r\n            else:\r\n                response = requests.request(login_method.upper(), url, headers=header, data=payload, files=files)\r\n\r\n        elif login_body_method == 'x-www-form-urlencoded':\r\n            header['Content-Type'] = 'application/x-www-form-urlencoded'\r\n            payload = {}\r\n            for i in eval(login_api_body):\r\n                payload[i[0]] = i[1]\r\n            # 先判断是否是cookie持久化，若是，则不处理\r\n            if login_response_set == 'cookie':\r\n                a = requests.session()\r\n                a.request(login_method.upper(), url, headers=header, data={})\r\n                return a\r\n            else:\r\n                response = requests.request(login_method.upper(), url, headers=header, data=payload)\r\n\r\n        elif login_body_method == 'GraphQL':\r\n            header['Content-Type'] = 'application/json'\r\n            query = login_api_body.split('*WQRF*')[0]\r\n            graphql = login_api_body.split('*WQRF*')[1]\r\n            try:\r\n                eval(graphql)\r\n            except:\r\n                graphql = '{}'\r\n            payload = '{\"query\":\"%s\",\"variables\":%s}' % (query, graphql)\r\n            # 先判断是否是cookie持久化，若是，则不处理\r\n            if login_response_set == 'cookie':\r\n                a = requests.session()\r\n                a.request(login_method.upper(), url, headers=header, data={})\r\n                return a\r\n            else:\r\n                response = requests.request(login_method.upper(), url, headers=header, data=payload)\r\n\r\n        else:  # 这时肯定是raw的五个子选项：\r\n            if login_body_method == 'Text':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if login_body_method == 'JavaScript':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if login_body_method == 'Json':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if login_body_method == 'Html':\r\n                header['Content-Type'] = 'text/plain'\r\n\r\n            if login_body_method == 'Xml':\r\n                header['Content-Type'] = 'text/plain'\r\n            # 先判断是否是cookie持久化，若是，则不处理\r\n            if login_response_set == 'cookie':\r\n                a = requests.session()\r\n                a.request(login_method.upper(), url, headers=header, data={})\r\n                return a\r\n            else:\r\n                response = requests.request(login_method.upper(), url, headers=header,\r\n                                            data=login_api_body.encode('utf-8'))\r\n        # 把返回值传递给前端页面\r\n        response.encoding = \"utf-8\"\r\n        DbHost.objects.update_or_create(host=login_host)\r\n        res = response.json()\r\n\r\n        # 先判断是否是cookie持久化，若是，则不处理\r\n        if login_response_set == 'cookie':\r\n            end_res = {\"response\": response.text, \"get_res\": 'cookie保持会话无需提取返回值'}\r\n        else:\r\n            get_res = ''  # 声明提取结果存放\r\n            for i in login_response_set.split('\\n'):\r\n                if i == \"\":\r\n                    continue\r\n                else:\r\n                    i = i.replace(' ', '')\r\n                    key = i.split('=')[0]  # 拿出key\r\n                    path = i.split('=')[1]  # 拿出路径\r\n                    value = res\r\n                    for j in path.split('/')[1:]:\r\n                        value = value[j]\r\n                    get_res += key + '=\"' + value + '\"\\n'\r\n            end_res = {\"response\": response.text, \"get_res\": get_res}\r\n        return HttpResponse(json.dumps(end_res), content_type='application/json')\r\n    except Exception as e:\r\n        return e\r\n\r\n\r\n# 首页保存请求数据\r\ndef Home_save_api(request):\r\n    project_id = request.GET['project_id']\r\n    ts_method = request.GET['ts_method']\r\n    ts_url = request.GET['ts_url']\r\n    ts_host = request.GET['ts_host']\r\n    ts_header = request.GET['ts_header']\r\n    ts_body_method = request.GET['ts_body_method']\r\n    ts_api_body = request.GET['ts_api_body']\r\n    ic(project_id,\r\n       ts_method,\r\n       ts_url,\r\n       ts_host,\r\n       ts_header,\r\n       ts_body_method,\r\n       ts_api_body)\r\n    DbApis.objects.create(project_id=project_id,\r\n                          name='首页保存接口',\r\n                          api_models=ts_method,\r\n                          api_url=ts_url,\r\n                          api_header=ts_header,\r\n                          api_host=ts_host,\r\n                          body_method=ts_body_method,\r\n                          api_body=ts_api_body,\r\n                          is_delete=0\r\n                          )\r\n\r\n    return HttpResponse(json.dumps({\"code\": 200, \"data\": True, \"message\": \"OK\"}))\r\n\r\n\r\n# 首页搜索功能\r\ndef search(request):\r\n    key = request.GET['key']\r\n\r\n    # 项目名搜哦所\r\n    projects = DbProject.objects.filter(name__contains=key)  # 获取name包含key的所有项目\r\n    plist = [{\"url\": \"/apis/%s/\" % i.id, \"text\": i.name, \"type\": \"project\"} for i in projects]\r\n    # 接口名搜索\r\n    apis = DbApis.objects.filter(name__contains=key)  # 获取name包含key的所有接口\r\n    alist = [{\"url\": \"/apis/%s/\" % i.project_id, \"text\": i.name, \"type\": \"api\"} for i in apis]\r\n\r\n    res = {\"results\": plist + alist}\r\n    return HttpResponse(json.dumps(res), content_type='application/json')\r\n\r\n\r\n# 账号修改\r\ndef sign_change(request):\r\n    if request.method == \"POST\":\r\n        data = json.loads(request.body)\r\n        u_name = data[\"username\"]\r\n        p_word = data[\"password\"]\r\n        ic(u_name, p_word)\r\n        if p_word in ['', None]:\r\n            dic = json.dumps({\"code\": 30002, \"data\": \"false\", \"message\": \"请输入密码\"})\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n        DbUser.objects.filter(username=u_name).update(password=p_word)\r\n        dic = json.dumps({\"code\": 200, \"data\": \"false\", \"message\": \"修改成功！\"})\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 查询账号信息\r\ndef sign_select(request):\r\n    if request.method == 'GET':\r\n        Id = request.GET['id']\r\n        user_s = DbUser.objects.filter(id=Id).values()[0]\r\n        ic(user_s)\r\n        dic = json.dumps(user_s)\r\n        # dic = json.dumps({'code': 200, 'data': True, 'massage': f'{user_s}'})\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 删除用户\r\ndef delete_user(request):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        ic(data)\r\n        Id = data['id']\r\n        DbUser.objects.filter(id=Id).update(is_delete=1)\r\n        dic = json.dumps({'code': 200, 'data': True, 'message': '删除成功！'})\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 新增全局变量\r\ndef global_data_new(request):\r\n    name = request.GET['name']\r\n    data = request.GET['data']\r\n    user_a_id = request.GET['user_a_id']\r\n    ic(name,\r\n       data,\r\n       user_a_id)\r\n    DbGlobalData.objects.create(name=name, data=data, user_id=user_a_id, is_delete=0)\r\n\r\n    return HttpResponse(json.dumps({'code': 200, 'data': True, 'message': '新增成功'}), content_type='application/json')\r\n\r\n\r\n# 删除全局变量\r\ndef delete_data(request):\r\n    Id = request.GET['id']\r\n    DbGlobalData.objects.filter(id=Id).delete()\r\n\r\n    return HttpResponse(json.dumps({\"code\": 200, \"data\": True, \"message\": \"OK\"}))\r\n\r\n\r\n# 查询全局变量\r\ndef show_data(request):\r\n    Id = request.GET['id']\r\n\r\n    dic = DbGlobalData.objects.filter(id=Id).values()[0]\r\n    ic(dic)\r\n    return HttpResponse(json.dumps(dic), content_type='application/json')\r\n\r\n\r\ndef save_data(request):\r\n    name = request.GET['name']\r\n    data = request.GET['data']\r\n    data_id = request.GET['data_id']\r\n\r\n    DbGlobalData.objects.filter(id=data_id).update(name=name, data=data)\r\n\r\n    return HttpResponse(json.dumps({'code': 200, 'data': True, 'message': '修改成功'}))\r\n\r\n\r\ndef Api_send_index(request):\r\n    start_time = time.time()\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        ic(data)\r\n        # 提取所有数据\r\n        ts_method = data['ts_method']  # post\r\n        ts_url = data['ts_url']  # url\r\n        ts_header = data['ts_api_header']  # header\r\n        ts_body_method = data['ts_body_method']  # 请求体\r\n        ts_api_body = data['ts_api_body']\r\n        ts_api_method = data['ts_api_method']  # 请求参数\r\n        content_type = data['content_type']\r\n        url = ts_url\r\n\r\n        # # 拼接完整url\r\n        # if ts_body_method == 'Query参数':\r\n        #     ts_api_body = 'Query参数'  # form-data\r\n        #     url = ts_url\r\n        # else:\r\n        #     ts_api_body = data['ts_api_body']  # form-data\r\n        #     url = ts_url\r\n\r\n        ic(ts_method,\r\n           ts_url,\r\n           ts_header,\r\n           ts_body_method,\r\n           ts_api_body,\r\n           ts_api_method,\r\n           content_type)\r\n        # 发送请求获取返回值\r\n        ts_headers = {}\r\n        for i in ts_header:\r\n            if i[0] == '':\r\n                ts_header.remove(i)\r\n            else:\r\n                pass\r\n        if ts_header == [['', '']]:\r\n            ts_header = '{}'\r\n        else:\r\n            for i in ts_header:\r\n                ts_headers[i[0]] = i[1]\r\n\r\n        if content_type != '':\r\n            ts_headers['content-type'] = content_type\r\n        ic(ts_headers)\r\n\r\n        try:\r\n            if ts_api_method == 'none':\r\n                response = requests.request(ts_method.upper(), url, headers=ts_headers, data={})\r\n\r\n            elif ts_api_method == 'form-data':\r\n                files = []\r\n                payload = {}\r\n                for i in eval(ts_api_body):\r\n                    payload[i[0]] = i[1]\r\n                response = requests.request(ts_method.upper(), url, headers=ts_headers, data=payload, files=files)\r\n\r\n            elif ts_api_method == 'x-www-form-urlencoded':\r\n                ts_headers['Content-Type'] = 'application/x-www-form-urlencoded'\r\n                payload = {}\r\n                for i in eval(ts_api_body):\r\n                    payload[i[0]] = i[1]\r\n                response = requests.request(ts_method.upper(), url, headers=ts_headers, data=payload)\r\n\r\n            else:  # 这时肯定是raw的五个子选项：\r\n                if ts_api_method == 'raw':\r\n                    ts_headers['Content-Type'] = 'text/plain'\r\n                response = requests.request(ts_method.upper(), url, headers=ts_headers,\r\n                                            data=ts_api_body.encode('utf-8'))\r\n            times = response.elapsed.total_seconds()  # 获取实际的响应时间\r\n            ic(times)\r\n            end_time = time.time()\r\n            all_time = end_time - start_time\r\n            heada = response.headers\r\n            head1 = dict(heada)\r\n            if head1.get('Transfer-Encoding'):\r\n                pass\r\n            else:\r\n                head1['Transfer-Encoding'] = ''\r\n            ic(head1)\r\n            head = json.dumps(head1)\r\n            ic(response.status_code)\r\n            DbApi.objects.create(ts_method=ts_method,\r\n                                 ts_url=ts_url,\r\n                                 ts_header=ts_headers,\r\n                                 ts_body_method=ts_body_method,\r\n                                 ts_api_body=ts_api_body,\r\n                                 ts_api_method=ts_api_method,\r\n                                 result=response.text,\r\n                                 head=head,\r\n                                 api_time=times,\r\n                                 all_time=all_time,\r\n                                 status_code=response.status_code,\r\n                                 is_delete=0)\r\n\r\n            # 把返回值传递给前端页面\r\n            if response.json()['code'] != 200:\r\n                TE = ''\r\n                heads = {\r\n                    \"head1\": f\"{heada['Server']}\",\r\n                    \"head2\": f\"{heada['Date']}\",\r\n                    \"head3\": f\"{heada['Content-Type']}\",\r\n                    \"head4\": f\"{TE}\",\r\n                    \"head5\": f\"{heada['Connection']}\",\r\n                    \"head6\": f\"{heada['X-Content-Type-Options']}\",\r\n                    \"head7\": f\"{heada['X-XSS-Protection']}\",\r\n                    \"head8\": f\"{heada['Cache-Control']}\",\r\n                    \"head9\": f\"{heada['Pragma']}\",\r\n                    \"head10\": f\"{heada['Expires']}\"\r\n                }\r\n            else:\r\n                heads = {\r\n                    \"head1\": f\"{heada['Server']}\",\r\n                    \"head2\": f\"{heada['Date']}\",\r\n                    \"head3\": f\"{heada['Content-Type']}\",\r\n                    \"head4\": f\"{heada['Transfer-Encoding']}\",\r\n                    \"head5\": f\"{heada['Connection']}\",\r\n                    \"head6\": f\"{heada['X-Content-Type-Options']}\",\r\n                    \"head7\": f\"{heada['X-XSS-Protection']}\",\r\n                    \"head8\": f\"{heada['Cache-Control']}\",\r\n                    \"head9\": f\"{heada['Pragma']}\",\r\n                    \"head10\": f\"{heada['Expires']}\"\r\n                }\r\n            response.encoding = \"utf-8\"\r\n            send_id = DbApi.objects.all().order_by(\"-id\").values()[0]['id']\r\n            return HttpResponse(json.dumps({\r\n                \"re\": response.text,\r\n                \"head\": f\"{json.dumps(heads)}\",\r\n                \"times\": f\"{times}\",\r\n                \"timea\": f\"{all_time}\",\r\n                \"send_id\": f\"{send_id}\",\r\n            }))\r\n        except Exception as e:\r\n            ic(e)\r\n            return HttpResponse(json.dumps({\"re\": f\"{e}\"}))\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\n# 新主页保存接口\r\ndef Api_new_save(request):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        api_name = data[\"api_name\"]\r\n        project_name = data[\"project_name\"]\r\n        ic(data)\r\n        try:\r\n            logs = DbApi.objects.all().order_by(\"-id\").values()[0]\r\n            ts_method = logs['ts_method'].lower()\r\n            urls = re.findall(r\"http://(.+?)/\", logs['ts_url'])\r\n            host_api = f'http://{urls[0]}'\r\n            url = logs['ts_url'].replace(host_api, '')\r\n            DbApis.objects.create(\r\n                project_id=project_name,\r\n                name=api_name,\r\n                result=logs[\"result\"],\r\n                api_body=logs[\"ts_api_body\"],\r\n                body_method=logs[\"ts_api_method\"],\r\n                api_header=logs[\"ts_header\"],\r\n                api_models=ts_method,\r\n                api_host=host_api,\r\n                api_url=url,\r\n                is_delete=0\r\n            )\r\n        except Exception as e:\r\n            ic(e)\r\n            return HttpResponse(json.dumps({\"re\": f\"{e}\"}))\r\n        else:\r\n            return HttpResponse(json.dumps({'code': 200, 'data': True, 'message': '保存成功'}))\r\n    else:\r\n        dic = json.dumps(RE.WRONG_REQUEST.value)\r\n        return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n\r\n\r\nclass Token_JWT:\r\n\r\n    @staticmethod\r\n    def token(request):\r\n        token = request.headers['Authorization'].split(' ')[1]\r\n        print(token)\r\n\r\n    # 查询接口\r\n    @staticmethod\r\n    def select_api(request):\r\n        if request.method == 'GET':\r\n            token = request.headers['Authorization'].split(' ')[1]\r\n            # 解码\r\n            token_time = decode_token(token).split(';')[1]\r\n            dt = datetime.datetime.strptime(token_time, '%Y-%m-%d %H:%M:%S')\r\n            now_time = datetime.datetime.strptime(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()),\r\n                                                  '%Y-%m-%d %H:%M:%S')\r\n            if token != \"\":\r\n                if now_time > dt:\r\n                    res = HttpResponse(json.dumps({\"code\": 401, \"data\": False, \"message\": \"token失效\"}))\r\n                    res.status_code = 401\r\n                    return res\r\n                else:\r\n                    ic('token未过期')\r\n                    ic(dt, type(dt), now_time, type(now_time))\r\n                    Id = request.GET['Id']\r\n                    log = DbApi.objects.filter(id=Id).values()[0]\r\n                    head = eval(log['head'])\r\n                    print(type(head))\r\n                    heads = {\r\n                        \"head1\": f\"{head['Server']}\",\r\n                        \"head2\": f\"{head['Date']}\",\r\n                        \"head3\": f\"{head['Content-Type']}\",\r\n                        \"head4\": f\"{head['Transfer-Encoding']}\",\r\n                        \"head5\": f\"{head['Connection']}\",\r\n                        \"head6\": f\"{head['X-Content-Type-Options']}\",\r\n                        \"head7\": f\"{head['X-XSS-Protection']}\",\r\n                        \"head8\": f\"{head['Cache-Control']}\",\r\n                        \"head9\": f\"{head['Pragma']}\",\r\n                        \"head10\": f\"{head['Expires']}\"\r\n                    }\r\n                    ic(log)\r\n                    return HttpResponse(json.dumps({'message': log, \"head\": json.dumps(heads)}))\r\n            else:\r\n                res = HttpResponse(json.dumps({\"code\": 401, \"data\": False, \"message\": \"token为空\"}))\r\n                res.status_code = 401\r\n                return res\r\n        else:\r\n            dic = json.dumps(RE.WRONG_REQUEST.value)\r\n            return HttpResponse(dic, content_type=RE.CONTENT_TYPE.value)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/My_api/views_api.py b/My_api/views_api.py
--- a/My_api/views_api.py	(revision 08e4c55c6d6ddbf13b3e1045dcb1d9184e6b2be3)
+++ b/My_api/views_api.py	(date 1617631622903)
@@ -155,8 +155,8 @@
         Authorization = request.headers['Authorization']
         Authorization_ = 'Basic YzU5Mzg3ZmMzMQ=='
         if Authorization == Authorization_:
-            u_name = data['params']['username']
-            p_word = data['params']['password']
+            u_name = data['username']
+            p_word = data['password']
             ic(u_name, p_word, data)
             if u_name == '':
                 dic = json.dumps({"code": 30001, "data": "false", "message": "请输入账号"})
Index: api_platform/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"api_platform URL Configuration\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/1.9/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.conf.urls import url, include\r\n    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.conf.urls import url\r\nfrom django.contrib import admin\r\n\r\nfrom My_api.views import *\r\nfrom My_api.views_tools import *\r\nfrom My_api.views_api import *\r\n\r\n\r\nurlpatterns = [\r\n    url(r'^$', login_user),\r\n    url(r'^admin/', admin.site.urls),\r\n    url(r\"^login/$\", login_user),  # 登录页面\r\n    url(r'^user/', user),  # 用户管理页面\r\n    url(r'^home/$', home),  # 进入首页\r\n    url(r\"^child/(?P<eid>.+)/(?P<oid>.*)/(?P<ooid>.*)/$\", child),  # 返回子页面\r\n    url(r\"^help/$\", api_help),  # 进入帮助页面\r\n    url(r\"^project_list/$\", project_list),  # 进入项目列表\r\n    url(r'^apis/(?P<id>.*)/$', open_apis),  # 进入接口库\r\n    url(r'^cases/(?P<id>.*)/$', open_cases),  # 进入用例库\r\n    url(r'^project_set/(?P<id>.*)/$', open_project_set),  # 进入项目设置\r\n    url(r'^look_report/(?P<eid>.*)/$', look_report),  # 查看报告\r\n    url(r'^global_data/(?P<Id>.*)/$', global_data),  # 进入全局变量\r\n    url(r'^index/$', index),  # 主要自改版\r\n    url(r'^tools_zhengjiao/$', zhengjiao),  # 进入小工具页面\r\n    url(r'^button/$', button),  # 进入小工具页面\r\n\r\n\r\n\r\n    url(r'^accounts/login/$', login_user),  # 非登录状态自动跳回登录页面\r\n    url(r'^welcome/$', welcome),  # 获取菜单\r\n    url(r'^logout/$', logout),  # 退出\r\n    url(r\"^login_action/$\", login_action),  # 登录\r\n    url(r\"^sign_action/$\", sign_action),  # 注册\r\n    url(r\"^sign_change/$\", sign_change),  # 修改密码\r\n    url(r\"^sign_select/$\", sign_select),  # 查询账号信息\r\n    url(r\"^delete_user/$\", delete_user),  # 删除用户信息\r\n    url(r\"^pei/$\", pei),  # 匿名吐槽\r\n    url(r'^delete_project/$', delete_project),  # 删除项目\r\n    url(r'^add_project/$', add_project),  # 新增项目\r\n    url(r'^save_project_set/(?P<id>.*)/$', save_project_set),  # 保存项目设置\r\n    url(r'^project_api_add/(?P<Pid>.*)/$', project_api_add),  # 新增接口\r\n    url(r'^project_api_del/(?P<id>.*)/$', project_api_del),  # 删除接口\r\n    url(r'^save_bz/$', save_bz),  # 保存备注\r\n    url(r'^get_bz/$', get_bz),  # 获取备注\r\n    url(r'^Api_save/$', Api_save),  # 保存接口\r\n    url(r'^get_api_data/$', get_api_data),  # 查询接口内容\r\n    url(r'^Api_send/$', Api_send),  # 调试层发送请求\r\n    url(r'^copy_api/$', copy_api),  # 复制接口\r\n    url(r'^error_request/$', error_request),  # 调用异常测试接口\r\n    url(r'^Api_send_home/$', Api_send_home),  # 首页发送请求\r\n    url(r'^get_home_log/$', get_home_log),  # 获取最新请求记录\r\n    url(r'^get_api_log_home/$', get_api_log_home),  # 获取完整的单一的请求记录数据\r\n    url(r'^home_log/(?P<log_id>.*)/$', home),  # 再次进入首页，这次要带着请求记录\r\n    url(r'^add_case/(?P<eid>.*)/$', add_case),  # 增加用例\r\n    url(r'^del_case/(?P<eid>.*)/(?P<oid>.*)/$', del_case),  # 删除用例\r\n    url(r'^copy_case/(?P<eid>.*)/(?P<oid>.*)/$', copy_case),  # 复制用例\r\n    url(r'^get_small/$', get_small),  # 获取小用例步骤的列表数据\r\n    url(r'^user_upload/$', user_upload),  # 上传头像\r\n    url(r'^add_new_step/$', add_new_step),  # 新增小步骤接口\r\n    url(r'^delete_step/(?P<eid>.*)/$', delete_step),  # 删除小步骤接口\r\n    url(r'^get_step/$', get_step),  # 获取小步骤\r\n    url(r'^save_step/$', save_step),  # 保存小步骤\r\n    url(r'^step_get_api/$', step_get_api),  # 步骤详情页获取接口数据\r\n    url(r'^Run_Case/$', Run_Case),  # 运行大用例\r\n    url(r'^save_project_header/$', save_project_header),  # 保存项目公共请求头\r\n    url(r'^save_case_name/$', save_case_name),  # 保存用例名称\r\n    url(r'^save_project_host/$', save_project_host),  # 保存项目公域名\r\n    url(r'^project_get_login/$', project_get_login),  # 获取项目登录态接口\r\n    url(r'^project_login_save/$', project_login_save),  # 保存项目登录态接口\r\n    url(r'^project_login_send/$', project_login_send),  # 调试请求登录态接口\r\n    url(r'^Home_save_api/$', Home_save_api),  # 首页保存请求数据\r\n    url(r'^search/$', search),  # 首页搜索功能\r\n    url(r'^global_data_new/$', global_data_new),  # 新增全局变量\r\n    url(r'^delete_data/$', delete_data),  # 删除全局变量\r\n    url(r'^show_data/$', show_data),  # 展示全局变量\r\n    url(r'^save_data/$', save_data),  # 修改全局变量\r\n\r\n    url(r'^Api_send_index/$', Api_send_index),  # 改版发送请求\r\n    url(r'^Api_new_save/$', Api_new_save),  # 改版保存请求\r\n    url(r'^select_api/$', Token_JWT.select_api),  # 改版保存请求\r\n\r\n    # --------------------小工具-------------------- #\r\n    url(r'^zhengjiao_play/$', zhengjiao_play),  # 正交工具运行\r\n    url(r'^zhengjiao_excel/$', zhengjiao_excel),  # 正交结果导出\r\n\r\n]\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api_platform/urls.py b/api_platform/urls.py
--- a/api_platform/urls.py	(revision 08e4c55c6d6ddbf13b3e1045dcb1d9184e6b2be3)
+++ b/api_platform/urls.py	(date 1617631673883)
@@ -44,7 +44,7 @@
     url(r'^accounts/login/$', login_user),  # 非登录状态自动跳回登录页面
     url(r'^welcome/$', welcome),  # 获取菜单
     url(r'^logout/$', logout),  # 退出
-    url(r"^login_action/$", login_action),  # 登录
+    url(r"^login_action$", login_action),  # 登录
     url(r"^sign_action/$", sign_action),  # 注册
     url(r"^sign_change/$", sign_change),  # 修改密码
     url(r"^sign_select/$", sign_select),  # 查询账号信息
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"BRANCH:platform\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </select>\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"7c8f87c7-80d7-4d0c-a22f-29780057091e\" name=\"默认的\" comment=\"解決跨域\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/My_api/views_api.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/My_api/views_api.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/api_platform/settings.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/api_platform/settings.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"DjangoConsoleOptions\" custom-start-script=\"import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)\">\r\n    <option name=\"myCustomStartScript\" value=\"import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"HTML File\" />\r\n        <option value=\"CSS File\" />\r\n        <option value=\"JavaScript File\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--tags\" />\r\n        <option name=\"title\" value=\"All\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"platform\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"JupyterTrust\" id=\"db71e735-98d2-483b-a0a7-ab593fa3f53a\" />\r\n  <component name=\"ProjectId\" id=\"1oso5R90bBdDsstiDNOfqhyGsnM\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n    <ConfirmationsSetting value=\"2\" id=\"新增\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"autoscrollToSource\" value=\"true\" />\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"DatabaseDriversLRU\" value=\"mysql\" />\r\n    <property name=\"DefaultHtmlFileTemplate\" value=\"HTML File\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/My_api/templates\" />\r\n    <property name=\"list.type.of.created.stylesheet\" value=\"CSS\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\r\n    <property name=\"node.js.path.for.package.tslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"nodejs_interpreter_path.stuck_in_default_project\" value=\"undefined stuck path\" />\r\n    <property name=\"nodejs_npm_path_reset_for_default_project\" value=\"true\" />\r\n    <property name=\"service.view.auto.scroll.from.source\" value=\"true\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\" />\r\n    <property name=\"vue.rearranger.settings.migration\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\platform\\My_api\\static\\xialakuang\" />\r\n      <recent name=\"D:\\platform\\My_api\\templates\" />\r\n      <recent name=\"D:\\automate\\api_platform\\My_api\\static\" />\r\n      <recent name=\"D:\\automate\\api_platform\\My_api\\static\\img\" />\r\n      <recent name=\"D:\\automate\\api_platform\\My_api\\static\\css\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\platform\\My_api\\templates\" />\r\n      <recent name=\"D:\\platform\\My_api\\static\" />\r\n      <recent name=\"D:\\platform\\My_api\\static\\xialakuang\\css\" />\r\n      <recent name=\"D:\\platform\\My_api\\static\\xuanxiangla\\201610091515\" />\r\n      <recent name=\"D:\\platform\\My_api\\static\\xuanxiangla\\201610091515\\scss\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Django 服务器.api_platform\">\r\n    <configuration name=\"button.html (1)\" type=\"JavascriptDebugType\" temporary=\"true\" nameIsGenerated=\"true\" uri=\"http://localhost:63342/platform/My_api/templates/button.html\" useBuiltInWebServerPort=\"true\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"button.html\" type=\"JavascriptDebugType\" temporary=\"true\" nameIsGenerated=\"true\" uri=\"http://localhost:63342/platform/My_api/static/button/button.html\" useBuiltInWebServerPort=\"true\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"Python.DjangoServer\" factoryName=\"Django server\">\r\n      <module name=\"api_platform\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"D:\\python\\python38\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <option name=\"host\" value=\"\" />\r\n      <option name=\"additionalOptions\" value=\"0.0.0.0:8080\" />\r\n      <option name=\"browserUrl\" value=\"\" />\r\n      <option name=\"runTestServer\" value=\"false\" />\r\n      <option name=\"runNoReload\" value=\"false\" />\r\n      <option name=\"useCustomRunCommand\" value=\"false\" />\r\n      <option name=\"customRunCommand\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"api_platform\" type=\"Python.DjangoServer\" factoryName=\"Django server\">\r\n      <module name=\"api_platform\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n        <env name=\"DJANGO_SETTINGS_MODULE\" value=\"api_platform.settings\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <option name=\"host\" value=\"\" />\r\n      <option name=\"additionalOptions\" value=\"127.0.0.1:8080\" />\r\n      <option name=\"browserUrl\" value=\"\" />\r\n      <option name=\"runTestServer\" value=\"false\" />\r\n      <option name=\"runNoReload\" value=\"false\" />\r\n      <option name=\"useCustomRunCommand\" value=\"false\" />\r\n      <option name=\"customRunCommand\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Django 服务器.api_platform\" />\r\n      <item itemvalue=\"JavaScript 调试.button.html\" />\r\n      <item itemvalue=\"JavaScript 调试.button.html (1)\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JavaScript 调试.button.html\" />\r\n        <item itemvalue=\"JavaScript 调试.button.html (1)\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"默认任务\">\r\n      <changelist id=\"7c8f87c7-80d7-4d0c-a22f-29780057091e\" name=\"默认的\" comment=\"\" />\r\n      <created>1614084475703</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1614084475703</updated>\r\n      <workItem from=\"1614084477027\" duration=\"607000\" />\r\n      <workItem from=\"1614085115912\" duration=\"640000\" />\r\n      <workItem from=\"1614085850875\" duration=\"3035000\" />\r\n      <workItem from=\"1614088937198\" duration=\"1774000\" />\r\n      <workItem from=\"1614090766879\" duration=\"840000\" />\r\n      <workItem from=\"1614126497065\" duration=\"280000\" />\r\n      <workItem from=\"1614126816530\" duration=\"33464000\" />\r\n      <workItem from=\"1614172534391\" duration=\"859000\" />\r\n      <workItem from=\"1614173653671\" duration=\"74000\" />\r\n      <workItem from=\"1614174340306\" duration=\"273000\" />\r\n      <workItem from=\"1614174670650\" duration=\"38000\" />\r\n      <workItem from=\"1614175093527\" duration=\"90000\" />\r\n      <workItem from=\"1614175216218\" duration=\"526000\" />\r\n      <workItem from=\"1614307993036\" duration=\"33089000\" />\r\n      <workItem from=\"1614400876074\" duration=\"18389000\" />\r\n      <workItem from=\"1614258830381\" duration=\"6035000\" />\r\n      <workItem from=\"1614932707599\" duration=\"5604000\" />\r\n      <workItem from=\"1615163244082\" duration=\"2645000\" />\r\n      <workItem from=\"1615170592810\" duration=\"52463000\" />\r\n      <workItem from=\"1615336019657\" duration=\"40576000\" />\r\n      <workItem from=\"1615508927043\" duration=\"16555000\" />\r\n      <workItem from=\"1615768140397\" duration=\"29687000\" />\r\n      <workItem from=\"1615861574678\" duration=\"17335000\" />\r\n      <workItem from=\"1615940868320\" duration=\"38111000\" />\r\n      <workItem from=\"1616113877531\" duration=\"24889000\" />\r\n      <workItem from=\"1616464679286\" duration=\"49227000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"django\">\r\n      <created>1614085021164</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1614085021165</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"django\">\r\n      <created>1614085899484</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1614085899484</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"django\">\r\n      <created>1614090838328</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1614090838328</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"django\">\r\n      <created>1614090981170</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1614090981170</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"django\">\r\n      <created>1614353862459</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1614353862459</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"django\">\r\n      <created>1614517576517</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1614517576527</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"django\">\r\n      <created>1614518770506</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1614518770506</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"django\">\r\n      <created>1614519406965</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1614519406965</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"django\">\r\n      <created>1615164422687</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1615164422687</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"django\">\r\n      <created>1615164439129</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1615164439129</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"django-mysql\">\r\n      <created>1615205542090</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1615205542090</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"locust_test\">\r\n      <created>1615377099185</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1615377099185</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"locust_test\">\r\n      <created>1615378356623</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1615378356623</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"locust_test\">\r\n      <created>1615516964940</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1615516964940</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"locust_test\">\r\n      <created>1615888048715</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1615888048715</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"locust_test\">\r\n      <created>1615987477069</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1615987477069</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"new_home_change\">\r\n      <created>1616416418784</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1616416418784</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"new_home_change\">\r\n      <created>1616502920477</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1616502920477</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"解決跨域\">\r\n      <created>1617112929383</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1617112929383</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"20\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TodoView\">\r\n    <todo-panel id=\"selected-file\">\r\n      <is-autoscroll-to-source value=\"true\" />\r\n    </todo-panel>\r\n    <todo-panel id=\"all\">\r\n      <are-packages-shown value=\"true\" />\r\n      <is-autoscroll-to-source value=\"true\" />\r\n    </todo-panel>\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"platform\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"django\" />\r\n    <MESSAGE value=\"django-mysql\" />\r\n    <MESSAGE value=\"locust_test\" />\r\n    <MESSAGE value=\"new_home_change\" />\r\n    <MESSAGE value=\"解決跨域\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"解決跨域\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <watches-manager>\r\n      <configuration name=\"Python.DjangoServer\">\r\n        <watch expression=\"response.text\" language=\"Python\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/api_platform$Unittest_in_run_case_py.coverage\" NAME=\"Unittest in run_case.py Coverage Results\" MODIFIED=\"1614564750688\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/My_api\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$ddd.coverage\" NAME=\"ddd Coverage Results\" MODIFIED=\"1615423313070\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/debug\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$public_method.coverage\" NAME=\"public_method Coverage Results\" MODIFIED=\"1616578496185\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/My_api/static/public_method\" />\r\n    <SUITE FILE_PATH=\"coverage/api$tests.coverage\" NAME=\"tests Coverage Results\" MODIFIED=\"1614261898705\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/My_api\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$locust__1_.coverage\" NAME=\"locust (1) Coverage Results\" MODIFIED=\"1615364583006\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/debug\" />\r\n    <SUITE FILE_PATH=\"coverage/api_platform$tests.coverage\" NAME=\"tests Coverage Results\" MODIFIED=\"1614325510564\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/My_api\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$test.coverage\" NAME=\"test Coverage Results\" MODIFIED=\"1615366434306\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/debug\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$jiek.coverage\" NAME=\"jiek Coverage Results\" MODIFIED=\"1615536200517\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/debug\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$mysql_id_order_by.coverage\" NAME=\"mysql_id_order_by Coverage Results\" MODIFIED=\"1616569131422\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/My_api/static/public_method\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$locaust.coverage\" NAME=\"locust Coverage Results\" MODIFIED=\"1615364443599\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/debug\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$tests.coverage\" NAME=\"tests Coverage Results\" MODIFIED=\"1616575518966\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/My_api\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$test_dingding.coverage\" NAME=\"test_dingding Coverage Results\" MODIFIED=\"1615288205355\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/debug\" />\r\n    <SUITE FILE_PATH=\"coverage/platform$locust_test__1_.coverage\" NAME=\"locust_test (1) Coverage Results\" MODIFIED=\"1615531578340\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/debug\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 08e4c55c6d6ddbf13b3e1045dcb1d9184e6b2be3)
+++ b/.idea/workspace.xml	(date 1617631710577)
@@ -31,7 +31,7 @@
     <list default="true" id="7c8f87c7-80d7-4d0c-a22f-29780057091e" name="默认的" comment="解決跨域">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/My_api/views_api.py" beforeDir="false" afterPath="$PROJECT_DIR$/My_api/views_api.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/api_platform/settings.py" beforeDir="false" afterPath="$PROJECT_DIR$/api_platform/settings.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api_platform/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/api_platform/urls.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -104,7 +104,7 @@
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/My_api/templates" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/../" />
     <property name="list.type.of.created.stylesheet" value="CSS" />
     <property name="node.js.detected.package.eslint" value="true" />
     <property name="node.js.detected.package.tslint" value="true" />
@@ -133,6 +133,13 @@
       <recent name="D:\platform\My_api\static\xuanxiangla\201610091515" />
       <recent name="D:\platform\My_api\static\xuanxiangla\201610091515\scss" />
     </key>
+  </component>
+  <component name="RunDashboard">
+    <option name="configurationTypes">
+      <set>
+        <option value="Python.DjangoServer" />
+      </set>
+    </option>
   </component>
   <component name="RunManager" selected="Django 服务器.api_platform">
     <configuration name="button.html (1)" type="JavascriptDebugType" temporary="true" nameIsGenerated="true" uri="http://localhost:63342/platform/My_api/templates/button.html" useBuiltInWebServerPort="true">
@@ -178,7 +185,7 @@
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <option name="launchJavascriptDebuger" value="false" />
       <option name="host" value="" />
-      <option name="additionalOptions" value="127.0.0.1:8080" />
+      <option name="additionalOptions" value="localhost:8080" />
       <option name="browserUrl" value="" />
       <option name="runTestServer" value="false" />
       <option name="runNoReload" value="false" />
@@ -235,6 +242,10 @@
       <workItem from="1615940868320" duration="38111000" />
       <workItem from="1616113877531" duration="24889000" />
       <workItem from="1616464679286" duration="49227000" />
+      <workItem from="1617161321517" duration="1310000" />
+      <workItem from="1617413216085" duration="1147000" />
+      <workItem from="1617592025095" duration="1192000" />
+      <workItem from="1617631511368" duration="198000" />
     </task>
     <task id="LOCAL-00001" summary="django">
       <created>1614085021164</created>
@@ -369,7 +380,14 @@
       <option name="project" value="LOCAL" />
       <updated>1617112929383</updated>
     </task>
-    <option name="localTasksCounter" value="20" />
+    <task id="LOCAL-00020" summary="解決跨域">
+      <created>1617114951085</created>
+      <option name="number" value="00020" />
+      <option name="presentableId" value="LOCAL-00020" />
+      <option name="project" value="LOCAL" />
+      <updated>1617114951085</updated>
+    </task>
+    <option name="localTasksCounter" value="21" />
     <servers />
   </component>
   <component name="TodoView">
